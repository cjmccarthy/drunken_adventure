-- VHDL Entity ece411.MEM_ACCESS.interface
--
-- Created:
--          by - hyunyi1.ews (evrt-252-05.ews.illinois.edu)
--          at - 15:56:26 03/14/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY MEM_ACCESS IS
   PORT( 
      CLK                  : IN     std_logic;
      DR_MEM_IN            : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      D_MDATAIN            : IN     LC3B_WORD;
      D_MRESP_H            : IN     STD_LOGIC;
      EXEC_ADDR_MEM        : IN     STD_LOGIC_VECTOR (15 DOWNTO 0);
      MEM_ALU_IN           : IN     STD_LOGIC_VECTOR (15 DOWNTO 0);
      MEM_CC_IN            : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      MEM_CONTROL_WORD_IN  : IN     STD_LOGIC_VECTOR (15 DOWNTO 0);
      MEM_PC_OUT           : IN     STD_LOGIC_VECTOR (15 DOWNTO 0);
      RESET_L              : IN     STD_LOGIC;
      STALL_L              : IN     std_logic;
      BRsel                : OUT    STD_LOGIC;
      DR_MEM_OUT           : OUT    std_logic_vector (2 DOWNTO 0);
      D_MADDR              : OUT    LC3B_WORD;
      D_MDATAOUT           : OUT    lc3b_word;
      D_MREAD_L            : OUT    std_logic;
      D_MWRITEH_L          : OUT    std_logic;
      D_MWRITEL_L          : OUT    std_logic;
      MDROUT               : OUT    LC3B_WORD;
      MEM_ALU_OUT          : OUT    lc3b_word;
      MEM_CONTROL_WORD_OUT : OUT    lc3b_word;
      M_PC_OUT             : OUT    LC3B_WORD
   );

-- Declarations

END MEM_ACCESS ;

--
-- VHDL Architecture ece411.MEM_ACCESS.struct
--
-- Created:
--          by - hyunyi1.ews (evrt-252-05.ews.illinois.edu)
--          at - 15:56:26 03/14/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;


ARCHITECTURE struct OF MEM_ACCESS IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL BITout       : STD_LOGIC;
   SIGNAL BRen         : STD_LOGIC;
   SIGNAL F            : STD_LOGIC;
   SIGNAL LD_MAR       : STD_LOGIC;
   SIGNAL LD_MDR       : STD_LOGIC;
   SIGNAL MDRMUXSel    : STD_LOGIC;
   SIGNAL MDRMUX_OUT   : LC3B_WORD;
   SIGNAL MEM_READ_L   : STD_LOGIC;
   SIGNAL MEM_WRITEH_L : std_logic;
   SIGNAL MEM_WRITEL_L : std_logic;

   -- Implicit buffer signal declarations
   SIGNAL D_MREAD_L_internal   : std_logic;
   SIGNAL D_MWRITEH_L_internal : std_logic;
   SIGNAL D_MWRITEL_L_internal : std_logic;
   SIGNAL MDROUT_internal      : LC3B_WORD;


   -- Component Declarations
   COMPONENT AND3
   PORT (
      A : IN     STD_LOGIC;
      B : IN     STD_LOGIC;
      C : IN     STD_LOGIC;
      F : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT BUF16
   PORT (
      WORDin  : IN     lc3b_word;
      WORDout : OUT    lc3b_word
   );
   END COMPONENT;
   COMPONENT BUF3
   PORT (
      WORDin  : IN     std_logic_vector (2 DOWNTO 0);
      WORDout : OUT    std_logic_vector (2 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT CONTROL_RIPPER
   PORT (
      CONTROL_WORD : IN     LC3B_WORD ;
      ALUOP        : OUT    LC3B_ALUOP ;
      --PCMUXsel     : OUT    STD_LOGIC;
      BRen         : OUT    STD_LOGIC ;
      LD_MAR       : OUT    STD_LOGIC ;
      LD_MDR       : OUT    STD_LOGIC ;
      WDATAMUXSel  : OUT    STD_LOGIC ;
      MDRMUXSel    : OUT    STD_LOGIC ;
      SR2MUXSel    : OUT    STD_LOGIC ;
      SR1MUXSel    : OUT    STD_LOGIC ;
      ADDR1MUXSel  : OUT    STD_LOGIC ;
      ADDR2MUXSel  : OUT    LC3B_4MUX_SEL ;
      LD_REG       : OUT    STD_LOGIC ;
      MEM_READ_L   : OUT    STD_LOGIC ;
      MEM_WRITEH_L : OUT    STD_LOGIC ;
      MEM_WRITEL_L : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT DMREAD_Calc
   PORT (
      CLK        : IN     STD_LOGIC ;
      MEM_READ_L : IN     STD_LOGIC ;
      MRESP_H    : IN     std_logic ;
      RESET_L    : IN     STD_LOGIC ;
      STALL_L    : IN     STD_LOGIC ;
      MREAD_L    : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT DMWrite_Calc
   PORT (
      CLK         : IN     STD_LOGIC ;
      MEM_WRITE_L : IN     STD_LOGIC ;
      MRESP_H     : IN     std_logic ;
      RESET_L     : IN     STD_LOGIC ;
      STALL_L     : IN     STD_LOGIC ;
      WRITE_L     : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT DM_Delay
   PORT (
      BITin  : IN     STD_LOGIC;
      BITout : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT MUX2_16
   PORT (
      A   : IN     LC3B_WORD;
      B   : IN     LC3B_WORD;
      SEL : IN     STD_LOGIC;
      F   : OUT    LC3B_WORD
   );
   END COMPONENT;
   COMPONENT NZP_Calc
   PORT (
      BR      : IN     STD_LOGIC ;
      CCin    : IN     lc3b_cc ;
      CLK     : IN     std_logic ;
      NZPin   : IN     std_logic_vector (2 DOWNTO 0);
      RESET_L : IN     STD_LOGIC ;
      STALL_L : IN     STD_LOGIC ;
      BRsel   : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT REG16
   PORT (
      A       : IN     STD_LOGIC_VECTOR (15 DOWNTO 0);
      CLK     : IN     STD_LOGIC;
      EN      : IN     STD_LOGIC;
      RESET_L : IN     STD_LOGIC;
      F       : OUT    STD_LOGIC_VECTOR (15 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : AND3 USE ENTITY ece411.AND3;
   FOR ALL : BUF16 USE ENTITY ece411.BUF16;
   FOR ALL : BUF3 USE ENTITY ece411.BUF3;
   FOR ALL : CONTROL_RIPPER USE ENTITY ece411.CONTROL_RIPPER;
   FOR ALL : DMREAD_Calc USE ENTITY ece411.DMREAD_Calc;
   FOR ALL : DMWrite_Calc USE ENTITY ece411.DMWrite_Calc;
   FOR ALL : DM_Delay USE ENTITY ece411.DM_Delay;
   FOR ALL : MUX2_16 USE ENTITY ece411.MUX2_16;
   FOR ALL : NZP_Calc USE ENTITY ece411.NZP_Calc;
   FOR ALL : REG16 USE ENTITY ece411.REG16;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_9 : AND3
      PORT MAP (
         A => D_MREAD_L_internal,
         B => D_MWRITEH_L_internal,
         C => D_MWRITEL_L_internal,
         F => F
      );
   U_3 : BUF16
      PORT MAP (
         WORDin  => MDROUT_internal,
         WORDout => D_MDATAOUT
      );
   U_6 : BUF16
      PORT MAP (
         WORDin  => MEM_CONTROL_WORD_IN,
         WORDout => MEM_CONTROL_WORD_OUT
      );
   U_7 : BUF16
      PORT MAP (
         WORDin  => MEM_ALU_IN,
         WORDout => MEM_ALU_OUT
      );
   U_8 : BUF16
      PORT MAP (
         WORDin  => MEM_PC_OUT,
         WORDout => M_PC_OUT
      );
   U_4 : BUF3
      PORT MAP (
         WORDin  => DR_MEM_IN,
         WORDout => DR_MEM_OUT
      );
   U_5 : CONTROL_RIPPER
      PORT MAP (
         CONTROL_WORD => MEM_CONTROL_WORD_IN,
         ALUOP        => OPEN,
         BRen         => BRen,
         LD_MAR       => LD_MAR,
         LD_MDR       => LD_MDR,
         WDATAMUXSel  => OPEN,
         MDRMUXSel    => MDRMUXSel,
         SR2MUXSel    => OPEN,
         SR1MUXSel    => OPEN,
         ADDR1MUXSel  => OPEN,
         ADDR2MUXSel  => OPEN,
         LD_REG       => OPEN,
         MEM_READ_L   => MEM_READ_L,
         MEM_WRITEH_L => MEM_WRITEH_L,
         MEM_WRITEL_L => MEM_WRITEL_L
      );
   U_0 : DMREAD_Calc
      PORT MAP (
         CLK        => CLK,
         MEM_READ_L => MEM_READ_L,
         MRESP_H    => D_MRESP_H,
         RESET_L    => RESET_L,
         STALL_L    => STALL_L,
         MREAD_L    => D_MREAD_L_internal
      );
   U_1 : DMWrite_Calc
      PORT MAP (
         CLK         => CLK,
         MEM_WRITE_L => MEM_WRITEH_L,
         MRESP_H     => D_MRESP_H,
         RESET_L     => RESET_L,
         STALL_L     => STALL_L,
         WRITE_L     => D_MWRITEH_L_internal
      );
   U_2 : DMWrite_Calc
      PORT MAP (
         CLK         => CLK,
         MEM_WRITE_L => MEM_WRITEL_L,
         MRESP_H     => D_MRESP_H,
         RESET_L     => RESET_L,
         STALL_L     => STALL_L,
         WRITE_L     => D_MWRITEL_L_internal
      );
   U_10 : DM_Delay
      PORT MAP (
         BITin  => CLK,
         BITout => BITout
      );
   MDRMUX : MUX2_16
      PORT MAP (
         A   => D_MDATAIN,
         B   => MEM_ALU_IN,
         SEL => MDRMUXSel,
         F   => MDRMUX_OUT
      );
   U_11 : NZP_Calc
      PORT MAP (
         BR      => BRen,
         CCin    => MEM_CC_IN,
         CLK     => CLK,
         NZPin   => DR_MEM_IN,
         RESET_L => RESET_L,
         STALL_L => STALL_L,
         BRsel   => BRsel
      );
   MAR : REG16
      PORT MAP (
         RESET_L => RESET_L,
         A       => EXEC_ADDR_MEM,
         EN      => LD_MAR,
         CLK     => BITout,
         F       => D_MADDR
      );
   MDR : REG16
      PORT MAP (
         RESET_L => RESET_L,
         A       => MDRMUX_OUT,
         EN      => LD_MDR,
         CLK     => F,
         F       => MDROUT_internal
      );

   -- Implicit buffered output assignments
   D_MREAD_L   <= D_MREAD_L_internal;
   D_MWRITEH_L <= D_MWRITEH_L_internal;
   D_MWRITEL_L <= D_MWRITEL_L_internal;
   MDROUT      <= MDROUT_internal;

END struct;
