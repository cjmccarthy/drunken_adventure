-- VHDL Entity ece411.L1DCSM.interface
--
-- Created:
--          by - hyunyi1.ews (gelib-057-09.ews.illinois.edu)
--          at - 22:31:22 03/28/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY L1DCSM IS
   PORT( 
      CLK        : IN     std_logic;
      DCacheHit  : IN     STD_LOGIC;
      DCacheMIss : IN     STD_LOGIC;
      DPResp_H   : IN     STD_LOGIC;
      RESET_L    : IN     std_logic;
      WriteBack  : IN     STD_LOGIC;
      DPMRead_L  : OUT    STD_LOGIC;
      DPMWrite_L : OUT    STD_LOGIC;
      WBSEL      : OUT    STD_LOGIC
   );

-- Declarations

END L1DCSM ;

--
-- VHDL Architecture ece411.L1DCSM.fsm
--
-- Created:
--          by - hyunyi1.ews (gelib-057-09.ews.illinois.edu)
--          at - 22:31:22 03/28/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF L1DCSM IS

   TYPE STATE_TYPE IS (
      DCacheHitState,
      DMemAccess,
      DWriteBack
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      CLK,
      RESET_L
   )
   -----------------------------------------------------------------
   BEGIN
      IF (RESET_L = '0') THEN
         current_state <= DCacheHitState;
      ELSIF (CLK'EVENT AND CLK = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      DCacheHit,
      DCacheMIss,
      DPResp_H,
      WriteBack,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN DCacheHitState => 
            IF (DCacheHit='1') THEN 
               next_state <= DCacheHitState;
            ELSIF (DCacheMiss='1' AND 
                   WriteBack='0') THEN 
               next_state <= DMemAccess;
            ELSIF (DCacheMiss='1' AND
                   WriteBack='1') THEN 
               next_state <= DWriteBack;
            ELSE
               next_state <= DCacheHitState;
            END IF;
         WHEN DMemAccess => 
            IF (DPRESP_H='1') THEN 
               next_state <= DCacheHitState;
            ELSE
               next_state <= DMemAccess;
            END IF;
         WHEN DWriteBack => 
            IF (DPRESP_H='1') THEN 
               next_state <= DMemAccess;
            ELSE
               next_state <= DWriteBack;
            END IF;
         WHEN OTHERS =>
            next_state <= DCacheHitState;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      DPMRead_L <= '1';
      DPMWrite_L <= '1';
      WBSEL <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN DMemAccess => 
            DPMREAD_L<= '0' after 6ns;
         WHEN DWriteBack => 
            DPMWRITE_L <= '0' after 6ns;
            WBSel<='1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
