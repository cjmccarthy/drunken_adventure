-- VHDL Entity ece411.arbiter.symbol
--
-- Created:
--          by - hyunyi1.ews (gelib-057-35.ews.illinois.edu)
--          at - 23:24:48 03/27/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY arbiter IS
   PORT( 
      DPMADDR    : IN     LC3B_WORD;
      DPMRead_L  : IN     STD_LOGIC;
      DPMWrite_L : IN     STD_LOGIC;
      IPMADDR    : IN     LC3B_WORD;
      IPMRead_L  : IN     STD_LOGIC;
      MResp_H    : IN     STD_LOGIC;
      RESET_L    : IN     std_logic;
      DPResp_H   : OUT    STD_LOGIC;
      IB_out     : OUT    STD_LOGIC;
      IPResp_H   : OUT    STD_LOGIC;
      MADDR      : OUT    LC3B_WORD;
      MREAD_L    : OUT    STD_LOGIC;
      MWrite_L   : OUT    STD_LOGIC;
      M_Stall    : OUT    STD_LOGIC
   );

-- Declarations

END arbiter ;

--
-- VHDL Architecture ece411.arbiter.struct
--
-- Created:
--          by - hyunyi1.ews (gelib-057-35.ews.illinois.edu)
--          at - 23:24:48 03/27/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY mp3lib;

ARCHITECTURE struct OF arbiter IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL DB_out : STD_LOGIC;
   SIGNAL F      : STD_LOGIC;
   SIGNAL F1     : STD_LOGIC;
   SIGNAL F2     : STD_LOGIC;
   SIGNAL F3     : STD_LOGIC;
   SIGNAL F4     : STD_LOGIC;
   SIGNAL F5     : STD_LOGIC;

   -- Implicit buffer signal declarations
   SIGNAL IB_out_internal : STD_LOGIC;


   -- Component Declarations
   COMPONENT DResp
   PORT (
      IB_out   : IN     STD_LOGIC ;
      MResp_H  : IN     STD_LOGIC ;
      DPResp_H : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT DRespBAR
   PORT (
      IB_out  : IN     STD_LOGIC ;
      MResp_H : IN     STD_LOGIC ;
      F2      : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT IResp
   PORT (
      IB_out   : IN     STD_LOGIC ;
      MResp_H  : IN     STD_LOGIC ;
      IPResp_H : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT IRespBAR
   PORT (
      IB_out  : IN     STD_LOGIC ;
      MResp_H : IN     STD_LOGIC ;
      F3      : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT REG1
   PORT (
      A       : IN     STD_LOGIC;
      CLK     : IN     STD_LOGIC;
      EN      : IN     STD_LOGIC;
      RESET_L : IN     STD_LOGIC;
      F       : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT AND2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT MUX2_1
   PORT (
      A   : IN     STD_LOGIC ;
      B   : IN     STD_LOGIC ;
      SEL : IN     STD_LOGIC ;
      F   : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT MUX2_16
   PORT (
      A   : IN     LC3B_WORD ;
      B   : IN     LC3B_WORD ;
      SEL : IN     STD_LOGIC ;
      F   : OUT    LC3B_WORD 
   );
   END COMPONENT;
   COMPONENT NAND2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT NOT1
   PORT (
      A : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT OR2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : AND2 USE ENTITY mp3lib.AND2;
   FOR ALL : DResp USE ENTITY ece411.DResp;
   FOR ALL : DRespBAR USE ENTITY ece411.DRespBAR;
   FOR ALL : IResp USE ENTITY ece411.IResp;
   FOR ALL : IRespBAR USE ENTITY ece411.IRespBAR;
   FOR ALL : MUX2_1 USE ENTITY mp3lib.MUX2_1;
   FOR ALL : MUX2_16 USE ENTITY mp3lib.MUX2_16;
   FOR ALL : NAND2 USE ENTITY mp3lib.NAND2;
   FOR ALL : NOT1 USE ENTITY mp3lib.NOT1;
   FOR ALL : OR2 USE ENTITY mp3lib.OR2;
   FOR ALL : REG1 USE ENTITY ece411.REG1;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   aDResp : DResp
      PORT MAP (
         IB_out   => IB_out_internal,
         MResp_H  => MResp_H,
         DPResp_H => DPResp_H
      );
   aDRespBAR : DRespBAR
      PORT MAP (
         IB_out  => IB_out_internal,
         MResp_H => MResp_H,
         F2      => F2
      );
   aIResp : IResp
      PORT MAP (
         IB_out   => IB_out_internal,
         MResp_H  => MResp_H,
         IPResp_H => IPResp_H
      );
   aIRespBAR : IRespBAR
      PORT MAP (
         IB_out  => IB_out_internal,
         MResp_H => MResp_H,
         F3      => F3
      );
   DBusy : REG1
      PORT MAP (
         RESET_L => F1,
         A       => F4,
         EN      => RESET_L,
         CLK     => F4,
         F       => DB_out
      );
   IBusy : REG1
      PORT MAP (
         RESET_L => F,
         A       => F5,
         EN      => RESET_L,
         CLK     => F5,
         F       => IB_out_internal
      );
   DB_Reset : AND2
      PORT MAP (
         A => RESET_L,
         B => F2,
         F => F1
      );
   IB_Reset : AND2
      PORT MAP (
         A => RESET_L,
         B => F3,
         F => F
      );
   M_READ_L : MUX2_1
      PORT MAP (
         A   => DPMRead_L,
         B   => IPMRead_L,
         SEL => IB_out_internal,
         F   => MREAD_L
      );
   U_2 : MUX2_16
      PORT MAP (
         A   => DPMADDR,
         B   => IPMADDR,
         SEL => IB_out_internal,
         F   => MADDR
      );
   U_5 : NAND2
      PORT MAP (
         A => DPMRead_L,
         B => DPMWrite_L,
         F => F4
      );
   U_3 : NOT1
      PORT MAP (
         A => IPMRead_L,
         F => F5
      );
   U_0 : OR2
      PORT MAP (
         A => IB_out_internal,
         B => DPMRead_L,
         F => MWrite_L
      );
   U_4 : OR2
      PORT MAP (
         A => IB_out_internal,
         B => DB_out,
         F => M_Stall
      );

   -- Implicit buffered output assignments
   IB_out <= IB_out_internal;

END struct;
