-- VHDL Entity ece411.mp2_CPU.symbol
--
-- Created:
--          by - mccart18.ews (linux7.ews.illinois.edu)
--          at - 02:23:43 03/06/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY mp2_CPU IS
   PORT( 
      RESET_L : IN     std_logic;
      START_H : IN     std_logic
   );

-- Declarations

END mp2_CPU ;

--
-- VHDL Architecture ece411.mp2_CPU.struct
--
-- Created:
--          by - mccart18.ews (linux7.ews.illinois.edu)
--          at - 02:23:44 03/06/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;


ARCHITECTURE struct OF mp2_CPU IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ADDRESS     : LC3b_word;
   SIGNAL ADDRMux1Sel : std_logic;
   SIGNAL ADDRMux2Sel : LC3b_4mux_sel;
   SIGNAL ADJ6MuxSel  : std_logic;
   SIGNAL ALUMuxSel   : std_logic;
   SIGNAL ALUop       : LC3b_aluop;
   SIGNAL CheckN      : std_logic;
   SIGNAL CheckP      : std_logic;
   SIGNAL CheckZ      : std_logic;
   SIGNAL DATAIN      : LC3b_word;
   SIGNAL DATAOUT     : LC3b_word;
   SIGNAL DRMuxSel    : std_logic;
   SIGNAL IR11        : std_logic;
   SIGNAL IR4         : std_logic;
   SIGNAL IR5         : std_logic;
   SIGNAL LoadIR      : std_logic;
   SIGNAL LoadMAR     : std_logic;
   SIGNAL LoadMDR     : std_logic;
   SIGNAL LoadNZP     : std_logic;
   SIGNAL LoadPC      : std_logic;
   SIGNAL MARMuxSel   : LC3b_4mux_sel;
   SIGNAL MDRMuxSel   : std_logic;
   SIGNAL MREAD_L     : std_logic;
   SIGNAL MRESP_H     : std_logic;
   SIGNAL MWRITEH_L   : std_logic;
   SIGNAL MWRITEL_L   : std_logic;
   SIGNAL OFFb        : std_logic;
   SIGNAL Opcode      : LC3b_opcode;
   SIGNAL PCMuxSel    : LC3b_4mux_sel;
   SIGNAL RFMuxSel    : LC3b_4mux_sel;
   SIGNAL RegWrite    : std_logic;
   SIGNAL StoreSR     : std_logic;
   SIGNAL clk         : std_logic := '0';
   SIGNAL immMuxSel   : LC3b_4mux_sel;
   SIGNAL n           : std_logic;
   SIGNAL p           : std_logic;
   SIGNAL z           : std_logic;


   -- Component Declarations
   COMPONENT CLKgen
   PORT (
      clk : INOUT  std_logic 
   );
   END COMPONENT;
   COMPONENT Control
   PORT (
      CheckN      : IN     std_logic ;
      CheckP      : IN     std_logic ;
      CheckZ      : IN     std_logic ;
      IR11        : IN     std_logic ;
      IR4         : IN     std_logic ;
      IR5         : IN     std_logic ;
      MRESP_H     : IN     std_logic ;
      OFFb        : IN     std_logic ;
      Opcode      : IN     LC3b_opcode ;
      RESET_L     : IN     std_logic ;
      START_H     : IN     std_logic ;
      clk         : IN     std_logic ;
      n           : IN     std_logic ;
      p           : IN     std_logic ;
      z           : IN     std_logic ;
      ADDRMux1Sel : OUT    std_logic ;
      ADDRMux2Sel : OUT    LC3b_4mux_sel ;
      ADJ6MuxSel  : OUT    std_logic ;
      ALUMuxSel   : OUT    std_logic ;
      ALUop       : OUT    LC3b_aluop ;
      DRMuxSel    : OUT    std_logic ;
      LoadIR      : OUT    std_logic ;
      LoadMAR     : OUT    std_logic ;
      LoadMDR     : OUT    std_logic ;
      LoadNZP     : OUT    std_logic ;
      LoadPC      : OUT    std_logic ;
      MARMuxSel   : OUT    LC3b_4mux_sel ;
      MDRMuxSel   : OUT    std_logic ;
      MREAD_L     : OUT    std_logic ;
      MWRITEH_L   : OUT    std_logic ;
      MWRITEL_L   : OUT    std_logic ;
      PCMuxSel    : OUT    LC3b_4mux_sel ;
      RFMuxSel    : OUT    LC3b_4mux_sel ;
      RegWrite    : OUT    std_logic ;
      StoreSR     : OUT    std_logic ;
      immMuxSel   : OUT    LC3b_4mux_sel 
   );
   END COMPONENT;
   COMPONENT Datapath
   PORT (
      ADDRMux1Sel : IN     std_logic ;
      ADDRMux2Sel : IN     LC3b_4mux_sel ;
      ADJ6MuxSel  : IN     std_logic ;
      ALUMuxSel   : IN     std_logic ;
      ALUop       : IN     LC3b_aluop ;
      DATAIN      : IN     LC3b_word ;
      DRMuxSel    : IN     std_logic ;
      LoadIR      : IN     std_logic ;
      LoadMAR     : IN     std_logic ;
      LoadMDR     : IN     std_logic ;
      LoadNZP     : IN     std_logic ;
      LoadPC      : IN     std_logic ;
      MARMuxSel   : IN     LC3b_4mux_sel ;
      MDRMuxSel   : IN     std_logic ;
      PCMuxSel    : IN     LC3b_4mux_sel ;
      RESET_L     : IN     std_logic ;
      RFMuxSel    : IN     LC3b_4mux_sel ;
      RegWrite    : IN     std_logic ;
      StoreSR     : IN     std_logic ;
      clk         : IN     std_logic ;
      immMuxSel   : IN     LC3b_4mux_sel ;
      ADDRESS     : OUT    LC3b_word ;
      CheckN      : OUT    std_logic ;
      CheckP      : OUT    std_logic ;
      CheckZ      : OUT    std_logic ;
      DATAOUT     : OUT    LC3b_word ;
      IR11        : OUT    std_logic ;
      IR4         : OUT    std_logic ;
      IR5         : OUT    std_logic ;
      OFFb        : OUT    std_logic ;
      Opcode      : OUT    LC3b_opcode ;
      n           : OUT    std_logic ;
      p           : OUT    std_logic ;
      z           : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Memory
   PORT (
      ADDRESS   : IN     LC3b_word ;
      DATAOUT   : IN     LC3b_word ;
      MREAD_L   : IN     std_logic ;
      MWRITEH_L : IN     std_logic ;
      MWRITEL_L : IN     std_logic ;
      RESET_L   : IN     std_logic ;
      clk       : IN     std_logic ;
      DATAIN    : OUT    LC3b_word ;
      MRESP_H   : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : CLKgen USE ENTITY ece411.CLKgen;
   FOR ALL : Control USE ENTITY ece411.Control;
   FOR ALL : Datapath USE ENTITY ece411.Datapath;
   FOR ALL : Memory USE ENTITY ece411.Memory;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   I0 : CLKgen
      PORT MAP (
         clk => clk
      );
   ControlUnit : Control
      PORT MAP (
         CheckN      => CheckN,
         CheckP      => CheckP,
         CheckZ      => CheckZ,
         IR11        => IR11,
         IR4         => IR4,
         IR5         => IR5,
         MRESP_H     => MRESP_H,
         OFFb        => OFFb,
         Opcode      => Opcode,
         RESET_L     => RESET_L,
         START_H     => START_H,
         clk         => clk,
         n           => n,
         p           => p,
         z           => z,
         ADDRMux1Sel => ADDRMux1Sel,
         ADDRMux2Sel => ADDRMux2Sel,
         ADJ6MuxSel  => ADJ6MuxSel,
         ALUMuxSel   => ALUMuxSel,
         ALUop       => ALUop,
         DRMuxSel    => DRMuxSel,
         LoadIR      => LoadIR,
         LoadMAR     => LoadMAR,
         LoadMDR     => LoadMDR,
         LoadNZP     => LoadNZP,
         LoadPC      => LoadPC,
         MARMuxSel   => MARMuxSel,
         MDRMuxSel   => MDRMuxSel,
         MREAD_L     => MREAD_L,
         MWRITEH_L   => MWRITEH_L,
         MWRITEL_L   => MWRITEL_L,
         PCMuxSel    => PCMuxSel,
         RFMuxSel    => RFMuxSel,
         RegWrite    => RegWrite,
         StoreSR     => StoreSR,
         immMuxSel   => immMuxSel
      );
   theDatapath : Datapath
      PORT MAP (
         ADDRMux1Sel => ADDRMux1Sel,
         ADDRMux2Sel => ADDRMux2Sel,
         ADJ6MuxSel  => ADJ6MuxSel,
         ALUMuxSel   => ALUMuxSel,
         ALUop       => ALUop,
         DATAIN      => DATAIN,
         DRMuxSel    => DRMuxSel,
         LoadIR      => LoadIR,
         LoadMAR     => LoadMAR,
         LoadMDR     => LoadMDR,
         LoadNZP     => LoadNZP,
         LoadPC      => LoadPC,
         MARMuxSel   => MARMuxSel,
         MDRMuxSel   => MDRMuxSel,
         PCMuxSel    => PCMuxSel,
         RESET_L     => RESET_L,
         RFMuxSel    => RFMuxSel,
         RegWrite    => RegWrite,
         StoreSR     => StoreSR,
         clk         => clk,
         immMuxSel   => immMuxSel,
         ADDRESS     => ADDRESS,
         CheckN      => CheckN,
         CheckP      => CheckP,
         CheckZ      => CheckZ,
         DATAOUT     => DATAOUT,
         IR11        => IR11,
         IR4         => IR4,
         IR5         => IR5,
         OFFb        => OFFb,
         Opcode      => Opcode,
         n           => n,
         p           => p,
         z           => z
      );
   DRAM : Memory
      PORT MAP (
         ADDRESS   => ADDRESS,
         DATAOUT   => DATAOUT,
         MREAD_L   => MREAD_L,
         MWRITEH_L => MWRITEH_L,
         MWRITEL_L => MWRITEL_L,
         RESET_L   => RESET_L,
         clk       => clk,
         DATAIN    => DATAIN,
         MRESP_H   => MRESP_H
      );

END struct;
