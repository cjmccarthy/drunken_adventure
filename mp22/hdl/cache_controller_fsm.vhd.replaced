-- VHDL Entity ece411.Cache_Controller.interface
--
-- Created:
--          by - mccart18.ews (linux7.ews.illinois.edu)
--          at - 22:44:35 03/05/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Cache_Controller IS
   PORT( 
      MISS        : IN     std_logic;
      MRESP_H     : IN     std_logic;
      PMRESP_H    : IN     STD_LOGIC;
      RESET_L     : IN     std_logic;
      clk         : IN     std_logic;
      PMREAD_L    : OUT    STD_LOGIC;
      PMWRITE_L   : OUT    STD_LOGIC;
      in_idle_hit : OUT    STD_LOGIC;
      in_load     : OUT    STD_LOGIC;
      in_wbc      : OUT    STD_LOGIC
   );

-- Declarations

END Cache_Controller ;

--
-- VHDL Architecture ece411.Cache_Controller.fsm
--
-- Created:
--          by - mccart18.ews (linux7.ews.illinois.edu)
--          at - 22:44:35 03/05/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF Cache_Controller IS

   TYPE STATE_TYPE IS (
      Idle_Hit,
      WriteBack,
      Load
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      RESET_L
   )
   -----------------------------------------------------------------
   BEGIN
      IF (RESET_L = '0') THEN
         current_state <= Idle_Hit;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      MISS,
      PMRESP_H,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN Idle_Hit => 
            IF (MISS = '1') THEN 
               next_state <= Load;
            ELSE
               next_state <= WriteBack;
            END IF;
         WHEN WriteBack => 
            IF (PMRESP_H='1') THEN 
               next_state <= Load;
            ELSE
               next_state <= WriteBack;
            END IF;
         WHEN Load => 
            IF (PMRESP_H = '1') THEN 
               next_state <= Idle_Hit;
            ELSE
               next_state <= Load;
            END IF;
         WHEN OTHERS =>
            next_state <= Idle_Hit;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      in_idle_hit <= '0';
      in_load <= '0';
      in_wbc <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN Idle_Hit => 
            in_idle_hit  <= '1';
         WHEN WriteBack => 
            in_wbc <= '1';
            PMWRITE_L <= '0';
         WHEN Load => 
            in_load <= '1';
            PMREAD_L <= '0';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
