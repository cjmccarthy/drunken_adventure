-- VHDL Entity ece411.Datapath.interface
--
-- Created:
--          by - mccart18.ews (gelib-057-33.ews.illinois.edu)
--          at - 04:30:50 02/20/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Datapath IS
   PORT( 
      ADDRMux1Sel : IN     std_logic;
      ADDRMux2Sel : IN     LC3b_4mux_sel;
      ADJ6MuxSel  : IN     std_logic;
      ALUMuxSel   : IN     std_logic;
      ALUop       : IN     LC3b_aluop;
      DATAIN      : IN     LC3b_word;
      DRMuxSel    : IN     std_logic;
      LoadIR      : IN     std_logic;
      LoadMAR     : IN     std_logic;
      LoadMDR     : IN     std_logic;
      LoadNZP     : IN     std_logic;
      LoadPC      : IN     std_logic;
      MARMuxSel   : IN     LC3b_4mux_sel;
      MDRMuxSel   : IN     std_logic;
      PCMuxSel    : IN     LC3b_4mux_sel;
      RESET_L     : IN     std_logic;
      RFMuxSel    : IN     LC3b_4mux_sel;
      RegWrite    : IN     std_logic;
      StoreSR     : IN     std_logic;
      clk         : IN     std_logic;
      immMuxSel   : IN     LC3b_4mux_sel;
      ADDRESS     : OUT    LC3b_word;
      CheckN      : OUT    std_logic;
      CheckP      : OUT    std_logic;
      CheckZ      : OUT    std_logic;
      DATAOUT     : OUT    LC3b_word;
      IR11        : OUT    std_logic;
      IR4         : OUT    std_logic;
      IR5         : OUT    std_logic;
      OFFb        : OUT    std_logic;
      Opcode      : OUT    LC3b_opcode;
      n           : OUT    std_logic;
      p           : OUT    std_logic;
      z           : OUT    std_logic
   );

-- Declarations

END Datapath ;

--
-- VHDL Architecture ece411.Datapath.struct
--
-- Created:
--          by - mccart18.ews (gelib-057-33.ews.illinois.edu)
--          at - 04:30:50 02/20/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;


ARCHITECTURE struct OF Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ADDRMux1Out : LC3b_word;
   SIGNAL ADDRMux2Out : LC3b_word;
   SIGNAL ADJ11out    : LC3b_word;
   SIGNAL ADJ6bout    : LC3b_word;
   SIGNAL ADJ6out     : LC3b_word;
   SIGNAL ADJ9out     : LC3b_word;
   SIGNAL ALUMuxout   : LC3b_word;
   SIGNAL ALUout      : LC3b_word;
   SIGNAL BRaddout    : LC3b_word;
   SIGNAL EightSig    : LC3b_word;
   SIGNAL GenCCout    : LC3b_cc;
   SIGNAL IR0         : std_logic;
   SIGNAL MARMuxout   : LC3b_word;
   SIGNAL MDRBMuxout  : LC3b_byte;
   SIGNAL MDRMuxout   : LC3b_word;
   SIGNAL MDROUT      : LC3b_word;
   SIGNAL MDROUTZEXT  : LC3b_word;
   SIGNAL PCMuxOut    : LC3b_word;
   SIGNAL PCPlus2out  : LC3b_word;
   SIGNAL PCout       : LC3b_word;
   SIGNAL RFAout      : LC3b_word;
   SIGNAL RFBout      : LC3b_word;
   SIGNAL RFMuxout    : LC3b_word;
   SIGNAL SrcA        : LC3b_reg;
   SIGNAL SrcB        : LC3b_reg;
   SIGNAL StoreMuxout : LC3b_reg;
   SIGNAL ZeroSig     : LC3b_word;
   SIGNAL dest        : LC3b_reg;
   SIGNAL destIR      : LC3b_reg;
   SIGNAL imm4        : LC3b_nibble;
   SIGNAL imm4SEXT    : LC3b_word;
   SIGNAL imm5        : LC3b_imm5;
   SIGNAL imm5SEXT    : LC3b_word;
   SIGNAL imm6SEXT    : LC3b_word;
   SIGNAL immout      : LC3b_word;
   SIGNAL index6      : LC3b_index6;
   SIGNAL offset11    : LC3b_offset11;
   SIGNAL offset9     : LC3b_offset9;

   -- Implicit buffer signal declarations
   SIGNAL ADDRESS_internal : LC3b_word;
   SIGNAL OFFb_internal    : std_logic;


   -- Component Declarations
   COMPONENT ADDRsplit
   PORT (
      ADDRESS : IN     LC3b_word ;
      clk     : IN     std_logic ;
      OFFb    : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT ADJ11
   PORT (
      clk      : IN     std_logic ;
      offset11 : IN     LC3b_offset11 ;
      ADJ11out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ4
   PORT (
      clk      : IN     std_logic ;
      imm4     : IN     LC3b_nibble ;
      imm4SEXT : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ5
   PORT (
      clk      : IN     std_logic ;
      imm5     : IN     LC3b_imm5 ;
      imm5SEXT : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ6
   PORT (
      clk     : IN     std_logic ;
      index6  : IN     LC3b_index6 ;
      ADJ6out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ6b
   PORT (
      clk      : IN     std_logic ;
      index6   : IN     LC3b_index6 ;
      ADJ6bout : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ9
   PORT (
      clk     : IN     std_logic ;
      offset9 : IN     LC3b_offset9 ;
      ADJ9out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ALU
   PORT (
      ALUMuxout : IN     LC3b_word ;
      ALUop     : IN     LC3b_aluop ;
      RFAout    : IN     LC3b_word ;
      clk       : IN     std_logic ;
      ALUout    : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT BRadd
   PORT (
      ADDRMux1Out : IN     LC3b_word ;
      ADDRMux2Out : IN     LC3b_word ;
      clk         : IN     std_logic ;
      BRaddout    : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT DRMux
   PORT (
      DRMuxSel : IN     std_logic ;
      clk      : IN     std_logic ;
      destIR   : IN     LC3b_reg ;
      dest     : OUT    LC3b_reg 
   );
   END COMPONENT;
   COMPONENT EightGen
   PORT (
      clk      : IN     std_logic ;
      EightSig : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT GenCC
   PORT (
      RFMuxout : IN     LC3b_word ;
      clk      : IN     std_logic ;
      GenCCout : OUT    LC3b_cc 
   );
   END COMPONENT;
   COMPONENT IR
   PORT (
      LoadIR   : IN     std_logic ;
      MDROUT   : IN     LC3b_word ;
      clk      : IN     std_logic ;
      Opcode   : OUT    LC3b_opcode ;
      SrcA     : OUT    LC3b_reg ;
      SrcB     : OUT    LC3b_reg ;
      destIR   : OUT    LC3b_reg ;
      offset9  : OUT    LC3b_offset9 ;
      imm5     : OUT    LC3b_imm5 ;
      imm4     : OUT    LC3b_nibble ;
      index6   : OUT    LC3b_index6 ;
      IR5      : OUT    std_logic ;
      IR11     : OUT    std_logic ;
      offset11 : OUT    LC3b_offset11 ;
      IR4      : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT MDRByteMux
   PORT (
      MDROUT     : IN     LC3b_word ;
      clk        : IN     std_logic ;
      MDRBMuxout : OUT    LC3b_byte ;
      OFFb       : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT NZP
   PORT (
      GenCCout : IN     LC3b_cc ;
      LoadNZP  : IN     std_logic ;
      clk      : IN     std_logic ;
      n        : OUT    std_logic ;
      p        : OUT    std_logic ;
      z        : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT NZPsplit
   PORT (
      clk    : IN     std_logic ;
      dest   : IN     LC3b_reg ;
      CheckN : OUT    std_logic ;
      CheckP : OUT    std_logic ;
      CheckZ : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Plus2
   PORT (
      PCout      : IN     LC3b_word ;
      clk        : IN     std_logic ;
      PCPlus2out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Reg16
   PORT (
      Input  : IN     LC3b_word ;
      RESET  : IN     std_logic ;
      clk    : IN     std_logic ;
      load   : IN     std_logic ;
      Output : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT RegFile
   PORT (
      RESET_L     : IN     std_logic ;
      RFMuxout    : IN     LC3b_word ;
      RegWrite    : IN     std_logic ;
      SrcB        : IN     LC3b_reg ;
      StoreMuxout : IN     LC3b_reg ;
      clk         : IN     std_logic ;
      dest        : IN     LC3b_reg ;
      RFAout      : OUT    LC3b_word ;
      RFBout      : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT StoreMux
   PORT (
      SrcA        : IN     LC3b_reg ;
      StoreSR     : IN     std_logic ;
      clk         : IN     std_logic ;
      destIR      : IN     LC3b_reg ;
      StoreMuxout : OUT    LC3b_reg 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux4
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      C   : IN     LC3b_word ;
      D   : IN     LC3b_word ;
      Sel : IN     LC3b_4mux_sel ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ZEXT8
   PORT (
      MDRBMuxout : IN     LC3b_byte ;
      clk        : IN     std_logic ;
      MDROUTZEXT : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ZeroGen
   PORT (
      clk     : IN     std_logic ;
      ZeroSig : OUT    LC3b_word 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADDRsplit USE ENTITY ece411.ADDRsplit;
   FOR ALL : ADJ11 USE ENTITY ece411.ADJ11;
   FOR ALL : ADJ4 USE ENTITY ece411.ADJ4;
   FOR ALL : ADJ5 USE ENTITY ece411.ADJ5;
   FOR ALL : ADJ6 USE ENTITY ece411.ADJ6;
   FOR ALL : ADJ6b USE ENTITY ece411.ADJ6b;
   FOR ALL : ADJ9 USE ENTITY ece411.ADJ9;
   FOR ALL : ALU USE ENTITY ece411.ALU;
   FOR ALL : BRadd USE ENTITY ece411.BRadd;
   FOR ALL : DRMux USE ENTITY ece411.DRMux;
   FOR ALL : EightGen USE ENTITY ece411.EightGen;
   FOR ALL : GenCC USE ENTITY ece411.GenCC;
   FOR ALL : IR USE ENTITY ece411.IR;
   FOR ALL : MDRByteMux USE ENTITY ece411.MDRByteMux;
   FOR ALL : NZP USE ENTITY ece411.NZP;
   FOR ALL : NZPsplit USE ENTITY ece411.NZPsplit;
   FOR ALL : Plus2 USE ENTITY ece411.Plus2;
   FOR ALL : Reg16 USE ENTITY ece411.Reg16;
   FOR ALL : RegFile USE ENTITY ece411.RegFile;
   FOR ALL : StoreMux USE ENTITY ece411.StoreMux;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : WordMux4 USE ENTITY ece411.WordMux4;
   FOR ALL : ZEXT8 USE ENTITY ece411.ZEXT8;
   FOR ALL : ZeroGen USE ENTITY ece411.ZeroGen;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   DATAOUT <= MDROUT;


   -- Instance port mappings.
   aADDRsplit : ADDRsplit
      PORT MAP (
         ADDRESS => ADDRESS_internal,
         clk     => clk,
         OFFb    => OFFb_internal
      );
   aADJ11 : ADJ11
      PORT MAP (
         clk      => clk,
         offset11 => offset11,
         ADJ11out => ADJ11out
      );
   aADJ4 : ADJ4
      PORT MAP (
         clk      => clk,
         imm4     => imm4,
         imm4SEXT => imm4SEXT
      );
   aADJ5 : ADJ5
      PORT MAP (
         clk      => clk,
         imm5     => imm5,
         imm5SEXT => imm5SEXT
      );
   aADJ6 : ADJ6
      PORT MAP (
         clk     => clk,
         index6  => index6,
         ADJ6out => ADJ6out
      );
   aADJ6b : ADJ6b
      PORT MAP (
         clk      => clk,
         index6   => index6,
         ADJ6bout => ADJ6bout
      );
   aADJ9 : ADJ9
      PORT MAP (
         clk     => clk,
         offset9 => offset9,
         ADJ9out => ADJ9out
      );
   aALU : ALU
      PORT MAP (
         ALUMuxout => ALUMuxout,
         ALUop     => ALUop,
         RFAout    => RFAout,
         clk       => clk,
         ALUout    => ALUout
      );
   aBRadd : BRadd
      PORT MAP (
         ADDRMux1Out => ADDRMux1Out,
         ADDRMux2Out => ADDRMux2Out,
         clk         => clk,
         BRaddout    => BRaddout
      );
   aDRMux : DRMux
      PORT MAP (
         DRMuxSel => DRMuxSel,
         clk      => clk,
         destIR   => destIR,
         dest     => dest
      );
   aEightGen : EightGen
      PORT MAP (
         clk      => clk,
         EightSig => EightSig
      );
   aGenCC : GenCC
      PORT MAP (
         RFMuxout => RFMuxout,
         clk      => clk,
         GenCCout => GenCCout
      );
   aIR : IR
      PORT MAP (
         LoadIR   => LoadIR,
         MDROUT   => MDROUT,
         clk      => clk,
         Opcode   => Opcode,
         SrcA     => SrcA,
         SrcB     => SrcB,
         destIR   => destIR,
         offset9  => offset9,
         imm5     => imm5,
         imm4     => imm4,
         index6   => index6,
         IR5      => IR5,
         IR11     => IR11,
         offset11 => offset11,
         IR4      => IR4
      );
   aByteMux : MDRByteMux
      PORT MAP (
         MDROUT     => MDROUT,
         clk        => clk,
         MDRBMuxout => MDRBMuxout,
         OFFb       => OFFb_internal
      );
   aNZP : NZP
      PORT MAP (
         GenCCout => GenCCout,
         LoadNZP  => LoadNZP,
         clk      => clk,
         n        => n,
         p        => p,
         z        => z
      );
   aNZPsplit : NZPsplit
      PORT MAP (
         clk    => clk,
         dest   => dest,
         CheckN => CheckN,
         CheckP => CheckP,
         CheckZ => CheckZ
      );
   aPlus2 : Plus2
      PORT MAP (
         PCout      => PCout,
         clk        => clk,
         PCPlus2out => PCPlus2out
      );
   MAR : Reg16
      PORT MAP (
         Input  => MARMuxout,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadMAR,
         Output => ADDRESS_internal
      );
   MDR : Reg16
      PORT MAP (
         Input  => MDRMuxout,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadMDR,
         Output => MDROUT
      );
   PC : Reg16
      PORT MAP (
         Input  => PCMuxOut,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadPC,
         Output => PCout
      );
   aRegFile : RegFile
      PORT MAP (
         RESET_L     => RESET_L,
         RFMuxout    => RFMuxout,
         RegWrite    => RegWrite,
         SrcB        => SrcB,
         StoreMuxout => StoreMuxout,
         clk         => clk,
         dest        => dest,
         RFAout      => RFAout,
         RFBout      => RFBout
      );
   aStoreMux : StoreMux
      PORT MAP (
         SrcA        => SrcA,
         StoreSR     => StoreSR,
         clk         => clk,
         destIR      => destIR,
         StoreMuxout => StoreMuxout
      );
   ADDRMux1 : WordMux2
      PORT MAP (
         A   => PCout,
         B   => RFAout,
         Sel => ADDRMux1Sel,
         F   => ADDRMux1Out
      );
   ADJ6mux : WordMux2
      PORT MAP (
         A   => ADJ6out,
         B   => ADJ6bout,
         Sel => ADJ6MuxSel,
         F   => imm6SEXT
      );
   ALUMux : WordMux2
      PORT MAP (
         A   => RFBout,
         B   => immout,
         Sel => ALUMuxSel,
         F   => ALUMuxout
      );
   MDRMux : WordMux2
      PORT MAP (
         A   => DATAIN,
         B   => ALUout,
         Sel => MDRMuxSel,
         F   => MDRMuxout
      );
   ADDRMux2 : WordMux4
      PORT MAP (
         A   => ADJ11out,
         B   => ADJ9out,
         C   => imm5SEXT,
         D   => ZeroSig,
         Sel => ADDRMux2Sel,
         F   => ADDRMux2Out
      );
   MARMux : WordMux4
      PORT MAP (
         A   => PCout,
         B   => ALUout,
         C   => MDROUT,
         D   => MDROUT,
         Sel => MARMuxSel,
         F   => MARMuxout
      );
   PCMux : WordMux4
      PORT MAP (
         A   => PCPlus2out,
         B   => BRaddout,
         C   => ALUout,
         D   => ADJ9out,
         Sel => PCMuxSel,
         F   => PCMuxOut
      );
   RFMux : WordMux4
      PORT MAP (
         A   => MDROUT,
         B   => ALUout,
         C   => PCMuxOut,
         D   => MDROUTZEXT,
         Sel => RFMuxSel,
         F   => RFMuxout
      );
   immMux : WordMux4
      PORT MAP (
         A   => imm6SEXT,
         B   => imm5SEXT,
         C   => imm4SEXT,
         D   => EightSig,
         Sel => immMuxSel,
         F   => immout
      );
   aZEXT8 : ZEXT8
      PORT MAP (
         MDRBMuxout => MDRBMuxout,
         clk        => clk,
         MDROUTZEXT => MDROUTZEXT
      );
   aZeroGen : ZeroGen
      PORT MAP (
         clk     => clk,
         ZeroSig => ZeroSig
      );

   -- Implicit buffered output assignments
   ADDRESS <= ADDRESS_internal;
   OFFb    <= OFFb_internal;

END struct;
